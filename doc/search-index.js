var searchIndex = JSON.parse('{\
"indexable_str":{"doc":"","t":"DLLLLLLLLLLLLLLLL","n":["IndexableStr","as_str","borrow","borrow_mut","fmt","from","index","index","index","index","into","len","new","to_string","try_from","try_into","type_id"],"q":[[0,"indexable_str"]],"d":["<code>IndexableStr</code> is a <code>struct</code> for creating immutable string â€¦","Returns an <code>&amp;&#39;a str</code> for the underlying string as follows.","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Returns a <code>usize</code> for the number of <code>char</code>s in the string.","Parameters:","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,2],[[]],[[]],[[1,3],4],[[]],[[1,[6,[5]]]],[[1,5],7],[[1,[8,[5]]]],[[1,[9,[5]]]],[[]],[1,5],[2,1],[[],10],[[],11],[[],11],[[],12]],"c":[],"p":[[3,"IndexableStr"],[15,"str"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"RangeFrom"],[15,"char"],[3,"RangeTo"],[3,"Range"],[3,"String"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
